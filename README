#################################################
#    PACK OF SCRIPTS FOR ORIGAMI SIMULATIONs    #
#################################################

Required input data:

    cadnano origami structure (e.g. 'origami.json')

Optional input:

    staple sequences (e.q. 'staples.csv', cadnano export format)
    AND scaffold sequence (e.q. 'seq.txt')

Output:

    2D-map ('origami_map.pdf')
    3D-map ('origami_cosm.pdb')
    em multiframe ('origami_multi.pdb')
    em relaxed structure ('origami_end.pdb')
    fullatom relaxed structure ('origami_end_full.pdb')
    pictures

    optional:
        md multiframe ('origami_mdmulti.pdb')

Required software:
    python 2.7,
    gromacs,
    COSM force fields (honeycomb and square)
    pymol (for pics)

# can be some problems with connects in pdb, if atom number > 99999

################################################

Usage:

 - random sequence
        bash run.sh NAME NT CGRATIO
 - or custom sequence
        bash run.sh NAME NT SEQ.TXT STAPLES.CSV

#################################################

Examples:

1. origami.json, cgratio=50, nt=0, random sequence

    bash run.sh origami 0 50

2. origami.json, nt=0, scaffold sequence = seq.txt, staple list = staples.csv
    
    bash run.sh origami 0 seq.txt staples.csv

!!!

if lattice is not recognizable automatically,
user has to choose (square/honeycomb) (run.sh, ${lattice} = 'u')

!!!

################################################

General workflow:

1. Converting json cadnano file to COSM pdb structure ('json2cosm.py'), 2D-map generation

2. Energy minimisation

3. Converting final structure to fullatom ('cosm2full.py') 

---- 'continue' button

4. MD

##################################################

Errors:

'error_exit' and 'topol_error' functions in run.sh

##################################################
